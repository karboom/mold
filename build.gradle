plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
}

group = 'me.karboom'
version = '1.0.3'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'cn.hutool:hutool-all:5.8.18'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
}

test {
    useJUnitPlatform()
}


task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}
// 生成 javadoc jar
task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}
// javadoc 配置，这里是自定义了 java doc 的一些配置
javadoc {
    description = "Generates project-level javadoc for use in -javadoc jar"

    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.version = true
    options.header = project.name
    options.addStringOption('Xdoclint:none', '-quiet')

    // suppress warnings due to cross-module @see and @link references;
    // note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
    options.encoding = "UTF-8"
    options.charSet = 'UTF-8'
}
artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "mold"
                description = "<<Component Description>>"
                url = "<<Component URL>>"
                licenses {
                    license {
                        name = "MIT"
                        url = "<<License URL>>"
                    }
                }
                developers {
                    developer {
                        id = "<<Developer ID>>"
                        name = "karboom"
                        email = "mail@karboom.me"
                    }
                }
                scm {
                    connection = ""
                    developerConnection = ""
                    url = ""
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        // 也可以是自己的私有仓库
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = project.properties['nexusUsername']
            password = project.properties["nexusPassword"]

        }

    }
}

signing {
    sign publishing.publications.mavenJava
}